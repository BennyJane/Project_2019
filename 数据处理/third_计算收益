#!/user/bin/env Python
#coding=utf-8

import pandas as pd

#将第二段段代码生成的文件（包含4列的文件）路径拷贝到下方
#该文件包含了圆点-三角形点的时间和价格
FirstResult_filepath="E:/编程接单/2019-4-14/Second_data02.csv"

#设置最后文件保存路径
filename="E:/编程接单/2019-4-14/Sales.csv"

#----------------------------------------------------------------------
df=pd.read_csv(FirstResult_filepath)

Sales=pd.DataFrame(columns=["exchange_day","income"])

#求总收益，每2行一组，需要判断第一行为买进操作，还是卖出操作
sum=0
nums=df.shape[0]
# print(nums)


j=0
# 第一行为升，此刻选择卖出
for i in range(0, nums, 2):
    # 需要判断每天的开始的第一行是升，还是降
    if (df.iloc[j, 3] - df.iloc[j, 1]) >= 0:
        try:
            Start_time1=df.iloc[i, 2]
            Start_time2 = df.iloc[i+1, 2]
        except Exception as e:
            Start_time1='2019-03-01'
            Start_time2 = '2019-10-02'
            print(e)
        if Start_time1[6:11]==Start_time2[6:11]:
            try:
                End_price01 = df.iloc[i, 3]
                End_price02 = df.iloc[i + 1, 3]
            except Exception as e:
                End_price01 = 0
                End_price02 = 0
            # print(End_price01-End_price02)
            sum=sum+(End_price01-End_price02)
            Day = Start_time2[0:19]
            Sales.loc[Sales.shape[0] + 1] = [Day, sum]
        else:
            j=i+1
            sum=0
            continue
        # if (i+2)>=nums:
        #     break
    else:
        try:
            Start_time1=df.iloc[i, 2]
            Start_time2 = df.iloc[i+1, 2]
        except Exception as e:
            Start_time1=df.iloc[i, 2]
            Start_time2 = '2019-05-02'
            print(e)
        if Start_time1[6:11]==Start_time2[6:11]:
            try:
                End_price01 = df.iloc[i, 3]
                End_price02 = df.iloc[i + 1, 3]
            except Exception as e:
                End_price01 = 0
                End_price02 = 0
            # print(End_price01 - End_price02)
            sum = sum + (End_price02 - End_price01)
            # print(sum)
            Day = Start_time2[0:19]
            Sales.loc[Sales.shape[0] + 1] = [Day, sum]
        else:
            j = i + 1
            sum=0
            continue
        # if (i+2)>=nums:
        #     break

#sales 求的是当前时间之前的累计收益；每一天的最后一条信息里的金额，就是当天的总收益
print(Sales)
Sales.to_csv(finalpath)

